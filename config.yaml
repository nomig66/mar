server: irc.twitch.tv

port: 6667

channels:
  - '#TwitchPresents'

readonlychannels:
  - '#kindafunnygames'
  - '#ltmejp'
  - '#steel_tv'
  - '#monstercat'
  - '#rootcatz'
  - '#wintergaming'

nolearnchannels:
  - '#quantumdota'

admins:
  - 'quantumdota!*'

ignore:
  users:
    - 'nightbot!*'
    - 'moobot!*'
    - 'sethblingbot!*'

# command prefix character
cmdchar: '>'

vhost: null

db: kappaio.db


modules:
  - kappaio
  - admin
  - read
  - log

#------------------------------------------------------------------------------
# AI settings
#------------------------------------------------------------------------------

ai: # These may take some explaining

  associations: # Hebbian association network configuration

    halflife: 10,
      # The association will lose half of its value `halflife` days after it
      # is last encountered in a sentence. Making this value lower will make
      # the bot focus on recent events, while making it longer will cause it
      # to recall older things more frequently

    limit: 180
      # Only take the best N associations for every sentence.
      # Making this value larger will cause the bot to explore broader
      # context while mamking it smaller will cause it to be more focused.

  similars: # how the AI determines similar words

    algorithm: porter
      # What algorithm to use to determine similar words. The `"porter"`
      # stemmer is recommended for English. Don't use `"levenshtein"` as its
      # presently extremely slow - for unsupported languages its better to use
      # `"none"`

    language: en # stemmer language (en = english, ru = russian, es = spanish)

    percent: 30 # maximum percentage difference for the levenshtein algorithm

  keywords: # control how keywords are picked

    threshold: 125
      # How many times less frequent should a word be than the most frequent
      # word in order for the bot to consider it "interesting". Helps remove
      # stop-words from the input text such as "a", "of", "and" etc.

    limit: 30
      # Consider at most this many associated keywords when trying to form the
      # reply. The best associated keywords are picked. Increasing this too
      # too much will cause it to only say obvious things (at least in theory)

  generalization: 50 # between 1 and 100
    # Controls the bot's tendency for generalization. In theory, making this
    # number closer to 100 will cause the bot to pick more general, typical
    # topics while lowering it will cause it to pick less typical topics. Best
    # left at 50

  creativity: 15 # between 1 and 100
    # Controls creative use of language. If increased to 100, the bot will
    # often use words in contexts where they were never used before. When
    # reduced, the bot will be more cautious when recognizing patterns. Setting
    # it to 0 will cause the bot to never recognize patterns of word usage.
    # For example, if the bot notices that the words "dog" and "cat" are used
    # in "many" common n-grams it may use the n-grams of "dog" in addition to
    # the n-grams of "cat" when forming a sentence that needs to contain the
    # keyword "cat" `creativity` determines how many is "many". 100 means that
    # 1 is enough, 50 that 5 are needed, 1 that 10 are needed and 0 that
    # creativity is off.

  love: # controls chance of replying to people
    # This is simply the probability that the bot will respond to people.
    # You can set the default and also set different settings for other
    # nicknames to 0
    default: 0 # between 1 and 100
    quantumdota: 100
    for:
      SethBlingBot: 0 # also between 1 and 100
      precociouspi: 0
      hexicube: 0


  ngram: # markov chain engine control

    length: 3
      # The length of chains to use. Longer length results with more
      # coherent sentences. Shorter length results with more sentences when
      # there is less training data. Must be <= 5. Recommended value 4.
      # Should stay at 3 for a while until the database gets large enough

    depth: 8
      # When the algorithm is searching for the next keyword, limit the
      # search depth in the n-gram graph to this number. Increasing this number
      # results with exponential increase in the memory and time needed.
      # Besides, too big of a value will result in low keyword density - the
      # number of words between two keywords can go up to `depth`

  #sleep: [1, 3]
  maxfreq:
    quantumdota: 8

  answer: # controls answer length
    minwords: 18 # minimum words to use in a sentence
    minkeys: 4 # of those, minimum that should be keywords

  partake:
    quantumdota:
      probability: 0
      traffic: 9999999

  context: # controls how much previous context the bot takes when considering
           # a reply
    halflife: 150
      # context half-dies every 150 seconds
    others: 0.25
      # context by people other than the talker is 4 times less important.
    maxsize: 1
      # use at maximum 1 lines of previous context. Increasing this currently
      # results with serious memory usage, so don't do it.

info:
  nick: markovchain_bot
  user: markovchain_bot
  name: markovchain_bot
  pass: oauth:aetj2g88ds38knxlwkp2kxqldetdiy
